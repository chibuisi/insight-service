Subscription
GET /topic - list by topic : paginated
POST /subscribe - add a suscriber to sub
POST /unsubscribe - remove a subscriber from sub

Subscriber
GET /{email} - get subsriber info by email
GET /subscription/{email} - list subscriber subscription topics : paginated
GET /all - list all subscribers paginated

Note: A Subscriber may not be a User. A Subscriber is or has been subscribed.
    A User may not have subsribed ever

Publisher to PubSub - done
Subscriber to PubSub message 

Topic (technology, food, human-languages, algorithms)
Article (Topic, ArticleData(Topic, ArticleData)), 
Newsletter(ArticleHeader, ArticleBody(Article), ArticleFooter)


UserService - manage users
UserSubscriptionService - manage user subcriptions
TopicService - manage all areas we cover (food, languages, technology, life, cultures, motivations, cryptocurrencies)
SchedulerService - periodically retrieve all due items. process and queue. Update next due
ScheduleService - customize schedule
QueueSystem (PubSubEmulator)
ProcessorService(PubSubServiceActivators) - asynchronously dequeue messages, create velocity templates and pass to mail service
MailService - asynchronously send out emails(newsletter, motivational quotes)
//NotificationService - users can configure how to recieve newsletters.
PaymentService - manage users payment

scheduler -> pubsub -> template -> mail -> pubsub -> mail



User(id, firstname, lastname, email, ipAddress, dateJoined)
Topic(id, name, description, dateAdded), TopicItem(id, title, description, dateAdded
	/topic/id, /topic/id/users, /topic/create, /topic/id/update, /topic/id/delete
	save, create, update, delete
	TopicItem - /topicitem/id, /topicitem/create, /topicitem/id/update, /topicitem/id/delete
Subscription(email, topic, dateSubscribed, status)
Subscription(email, topic, frequency, dateDue, dateSubscribed)
    subscribe, unsubscribe, getSubscribersOnTopic, getSubscriberTopics
ComfigureSubscription


TopicItem [1,Word]
TopicItemProperties[
			[1,name,joy],
			[1,meaning,shows one is happy],
			[1,origin,english],
			[1,opposite,anger]
		   ]

one to many relationship

Done
1. fetch a topic
2. fetch items under a topic
3. save topic
4. save topic items
user
1. save user
2. get user by email
3. get users by id
4. get user by ipAddress
subscription
1. subscription api - almost done, doing update subscription
2. create converters for SupportedTopics, UnsubscribeReason
Added unique constraint to topic name
added static method (of) to enums
scheduler
create scheduler for every topic - not done.
schedule - save schedule (default, weekly, monthly, daily), delete schedule, pause/unpause,
1.  delete schedule, pause/unpause
1. get schedule by userId and topic - /schedule?userId=1&topic=motivation done
2. get user schedule - /schedule/user (all, default, daily, weekly, monthly) schedule types
2. get schedules for user and topic - /schedule/user/topic?userId=1&topic=motivation&scheduleType=all
3. get schedules for topic - /schedule/topic?topic=motivation&scheduleType=all
ready schedule table
hourly for daily,weekly,monthly,default schedules
Note: you dont update a schedule. You delete it and add a new one.
weekly schedule frequency is min 1 and max 4. Otherwise advice to use monthly
monthly schedule frequency is min 1 and max 12. Otherwise advice we dont support.
every midnight scheduler --done
if a user unsubscribe then deactivate/remove all schedules --done
schedules - scheduler reads hourly database table and puts on readySchedule table and tries to update
frequency counter to original if required.
convert every timezone to system timezone before saving time
schedules - scheduler reads hourly database table and puts on queue and readySchedule table
update user (firstname and lastname)
fix subscribe failure when wrong timezone
create TemplateHelper
select monthly schedule by day
synchronize default, daily, weekly and monthly schedules
update sent column on ready schedule
require a user for creating custom schedules
save sent mails on a mail table
model topic item and user offset relationship
add a table to save user topic item offsets
add an offsetSequence to topic item table
select topic item by user offset
update user offset
download topic item csv template controller
add transaction for new week or month updates
api for adding list of topic items
upload topic items using csv file controller.
test new week or month


Doing
security
UI Skeleton (VueJS)
UI topic item (type out or download/upload csv)
UI subscribe
UI topics and coaches
UI coach
add swagger
paginate topic items
throw and handle exceptions when not found (topic, topic item, user)
update DTOs
validate required fields for all services
send a thank you note after subscription and after unsubscription

Todo
security, recaptcha, sql injection scans
use app engine for deployment, cloud sql for db, pubsub for queue
use sendgrid for email 19.99


Challenges faced
1. I could not get unique constraint working on the field title. I solved it by
2. Persisting enums to db - solution: created a converter.
3. update new week or month could not work, had to write custom update query for it
4. two persons uploading topic items at the same time will break db integrity


Notes:
These are valid formats for cron expressions:

0 0 * * * * = the top of every hour of every day.
*/10 * * * * * = every ten seconds.
0 0 8-10 * * * = 8, 9 and 10 o'clock of every day.
0 0 6,19 * * * = 6:00 AM and 7:00 PM every day.
0 0/30 8-10 * * * = 8:00, 8:30, 9:00, 9:30, 10:00 and 10:30 every day.
0 0 9-17 * * MON-FRI = on the hour nine-to-five weekdays
0 0 0 25 12 ? = every Christmas Day at midnight
The pattern is:

second, minute, hour, day, month, weekday
So your answer is:

0 0 0 * * *

every Sunday at midnight: - https://docs.oracle.com/cd/E19226-01/820-7627/giqlg/index.html
@Schedule(dayOfWeek="Sun", hour="0")
public void cleanupWeekData() { ... }

every Friday at 11:00 PM.
@Schedules ({
    @Schedule(dayOfMonth="Last"),
    @Schedule(dayOfWeek="Fri", hour="23")
})
public void doPeriodicCleanup() { ... }

//to include a ready schedule
if freqCounter > 1
    remove from ready list, reduce to -1 and update in db

//to update freqCounter
if freq != freqCounter
    freCounter = freq


*Note: it is not efficient to pick topic items by date tags. reason is that
we will require a new topic item for each day. More efficient is offsetting each topic item
for each user. This will allow us back-forward or reuse previous topic items

Questions
How many threads can a Java VM support?
Maximum number of threads depends on following things:
Hardware Configuration like microprocessor, RAM.
Operating System like whether it is 32-bit or 64-bit
Code inside the run method. If code inside the run method is huge then single thread object will have more memory requirement